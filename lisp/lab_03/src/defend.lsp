(defun num->str (num)
  (if (complexp num)
      (format nil "~,2f + ~,2fi" (realpart num) (imagpart num))
      (format nil "~,2f" num)))

(defun solve-qe (a b c)
	(or (and (and (not (zerop a)) (not (zerop c)))
				   (let* ((D (- (* b b) (* 4 a c)))
                  (root1 (/ (+ b (sqrt D)) (* -2 a)))
                  (root2 (- (- b) root1)))
					   (or (and (zerop D) (not (format t "root = ~a" (num->str (/ (- b) (* 2 a))))))
							   (not (format t "x1 = ~a, x2 = ~a" (num->str root1) (num->str root2))))))
			(and (zerop a) (or (and (not (zerop b)) (not (format t "root=~a" (num->str (/ (- c) b)))))
						             (and (and (zerop b) (not (zerop c))) "No roots!")
						             "inf"))
			(not (format t "x1 = ~a, x2 = ~a" (num->str 0) (num->str (/ (- b) a))))))
